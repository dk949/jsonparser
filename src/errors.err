/home/davidk/code/cxx/jsonparser/src/json_class.hpp:26:5: style: Class 'JsonValue' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    JsonValue(Data d);
    ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:201:41: performance: Function parameter 'x' should be passed by const reference. [passedByValue]
Parser<std::string> stringP(std::string x) {
                                        ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:273:32: performance: Function parameter 'input' should be passed by const reference. [passedByValue]
    return fmap([](std::string input) { return JsonBool(input == "true"s); },
                               ^
error: unknown argument: '-fconcepts-diagnostics-depth=2' [clang-diagnostic-error]
/home/davidk/code/cxx/jsonparser/src/main.cpp:15:9: error: function-like macro 'DEV' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage,-warnings-as-errors]
#define DEV(X) [[maybe_unused]] X
        ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:26:9: error: function-like macro 'QUERY' used; consider a 'constexpr' template function [cppcoreguidelines-macro-usage,-warnings-as-errors]
#define QUERY(A, B, C) [[maybe_unused]] Query<A, B> zzzzzzzzzzzzzzzzz##C
        ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:91:33: error: expected '>' [clang-diagnostic-error]
std::pair <Collection,Collection span(auto f, Collection l) {
                                ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:91:11: note: to match this '<'
std::pair <Collection,Collection span(auto f, Collection l) {
          ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:136:19: error: loop variable is copied but only used as const reference; consider making it a const reference [performance-for-range-copy,-warnings-as-errors]
        for (auto p : a) {
                  ^
             const  &
/home/davidk/code/cxx/jsonparser/src/main.cpp:202:33: error: parameter 'x' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param,-warnings-as-errors]
    return sequenceA(map(charP, x));
                                ^
                                std::move( )
/home/davidk/code/cxx/jsonparser/src/main.cpp:208:20: error: no matching function for call to 'span' [clang-diagnostic-error]
        auto ret = span(f, input);
                   ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:233:12: note: in instantiation of function template specialization 'spanP<(lambda at /home/davidk/code/cxx/jsonparser/src/main.cpp:233:18)>' requested here
    return spanP([](char c) { return c != '"'; });
           ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:269:31: error: the parameter #1 is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
    return fmap([](std::string) { return JsonNull(); }, stringP("null"));
                              ^
                   const      &
/home/davidk/code/cxx/jsonparser/src/main.cpp:269:31: error: all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]
    return fmap([](std::string) { return JsonNull(); }, stringP("null"));
                              ^
                               /*unused*/
/home/davidk/code/cxx/jsonparser/src/main.cpp:273:32: error: the parameter 'input' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
    return fmap([](std::string input) { return JsonBool(input == "true"s); },
                               ^
                   const      &
/home/davidk/code/cxx/jsonparser/src/main.cpp:278:32: error: the parameter 'input' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
    return fmap([](std::string input) { return JsonNumber(std::stoi(input)); },
                               ^
                   const      &
/home/davidk/code/cxx/jsonparser/src/main.cpp:297:62: error: the parameter #1 is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param,-warnings-as-errors]
std::optional<std::pair<std::string, int>> innerL(std::string) {
                                                             ^
                                                  const      &
/home/davidk/code/cxx/jsonparser/src/main.cpp:297:62: error: all parameters should be named in a function [readability-named-parameter,-warnings-as-errors]
std::optional<std::pair<std::string, int>> innerL(std::string) {
                                                             ^
                                                              /*unused*/
/home/davidk/code/cxx/jsonparser/src/main.cpp:298:81: error: 42 is a magic number; consider replacing it with a named constant [readability-magic-numbers,-warnings-as-errors]
    return std::optional<std::pair<std::string, int>> {std::make_pair("hello"s, 42)};
                                                                                ^
/home/davidk/code/cxx/jsonparser/src/main.cpp:301:5: error: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape,-warnings-as-errors]
int main() {
    ^
